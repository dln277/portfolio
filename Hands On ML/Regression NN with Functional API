{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Regression NN with Functional API","provenance":[],"authorship_tag":"ABX9TyMHOIC+Iuyf1QcJDBpU+V+v"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lQ4NHLYj5DMH","executionInfo":{"status":"ok","timestamp":1606322927599,"user_tz":300,"elapsed":5332,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"21f9deaf-0c88-4e58-e351-3e78363807b8"},"source":["from sklearn.datasets import fetch_california_housing\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","\n","import tensorflow as tf\n","from tensorflow import keras\n","\n","housing = fetch_california_housing()\n","\n","X_train_full, X_test, y_train_full, y_test = train_test_split(housing.data,housing.target)\n","X_train, X_valid,y_train,y_valid = train_test_split(X_train_full, y_train_full)\n","\n","scaler = StandardScaler()\n","X_train=scaler.fit_transform(X_train)\n","X_valid=scaler.transform(X_valid)\n","X_test=scaler.transform(X_test)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Downloading Cal. housing from https://ndownloader.figshare.com/files/5976036 to /root/scikit_learn_data\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"wcOId4pG-STc","executionInfo":{"status":"ok","timestamp":1606322927847,"user_tz":300,"elapsed":5572,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["input_ = keras.layers.Input(shape=X_train.shape[1:]) #specify shape and dtype of input \n","hidden1 = keras.layers.Dense(30,activation='relu')(input_) #create dense layer then use it as a function to pass through input\n","hidden2 = keras.layers.Dense(30,activation='relu')(hidden1) #create dense layer then use it as a function to pass through hidden layer 1\n","concat = keras.layers.Concatenate()([input_,hidden2]) #create concat layer and use it as a function\n","output = keras.layers.Dense(1)(concat) #create output layer and use it as a function to pass through concat layer \n","model = keras.Model(inputs=[input_],outputs=[output]) "],"execution_count":2,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VTW8k-CaLUsx","executionInfo":{"status":"ok","timestamp":1606322937544,"user_tz":300,"elapsed":15255,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"660bd387-3391-4041-c2ba-2bbab380666d"},"source":["model.compile(loss='mean_squared_error',optimizer='sgd')\n","history=model.fit(X_train,y_train,epochs=20,validation_data=(X_valid,y_valid))\n","mse_test=model.evaluate(X_test,y_test)\n","X_new=X_test[:3]\n","y_pred=model.predict(X_new)"],"execution_count":3,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","363/363 [==============================] - 1s 2ms/step - loss: 1.0147 - val_loss: 0.5513\n","Epoch 2/20\n","363/363 [==============================] - 0s 1ms/step - loss: 1.0982 - val_loss: 0.6296\n","Epoch 3/20\n","363/363 [==============================] - 0s 1ms/step - loss: 1.2384 - val_loss: 1.2648\n","Epoch 4/20\n","363/363 [==============================] - 0s 1ms/step - loss: 39.1294 - val_loss: 6.5914\n","Epoch 5/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","Epoch 6/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","Epoch 7/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","Epoch 8/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","Epoch 9/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","Epoch 10/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","Epoch 11/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","Epoch 12/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","Epoch 13/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","Epoch 14/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","Epoch 15/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","Epoch 16/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","Epoch 17/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","Epoch 18/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","Epoch 19/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","Epoch 20/20\n","363/363 [==============================] - 0s 1ms/step - loss: nan - val_loss: nan\n","162/162 [==============================] - 0s 821us/step - loss: nan\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"X080BDNdLeEc","executionInfo":{"status":"ok","timestamp":1606322937683,"user_tz":300,"elapsed":15387,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["#Send subset of features through deep path and another subset through wide path \n","\n","input_A = keras.layers.Input(shape=[5],name='wide_input')\n","input_B = keras.layers.Input(shape=[6],name='deep_input')\n","hidden1=keras.layers.Dense(30,activation='relu')(input_B)\n","hidden2=keras.layers.Dense(30,activation='relu')(hidden1)\n","concat = keras.layers.concatenate([input_A,hidden2])\n","output = keras.layers.Dense(1,name='output')(concat)\n","model=keras.Model(inputs=([input_A,input_B]),outputs=[output])"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X8zYutO2N-tj","executionInfo":{"status":"ok","timestamp":1606322947571,"user_tz":300,"elapsed":25265,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"78df6440-6416-4213-90e5-8f35946f2af9"},"source":["#Need to create X_train_A/B, same for testing, val, and X_new \n","model.compile(loss='mse',optimizer=keras.optimizers.SGD(lr=1e-3))\n","\n","X_train_A,X_train_B = X_train[:,:5],X_train[:,2:]\n","X_valid_A,X_valid_B = X_valid[:,:5],X_valid[:,2:]\n","X_test_A,X_test_B = X_test[:,:5],X_test[:,2:]\n","X_new_A,X_new_B = X_test_A[:3],X_test_B[:3]\n","\n","history = model.fit((X_train_A,X_train_B),y_train,epochs=20,\n","                    validation_data=((X_valid_A,X_valid_B),y_valid))\n","mse_test = model.evaluate((X_test_A,X_test_B),y_test)\n","y_pred=model.predict((X_new_A,X_new_B))"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","363/363 [==============================] - 1s 1ms/step - loss: 1.9414 - val_loss: 0.8312\n","Epoch 2/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.7587 - val_loss: 0.6884\n","Epoch 3/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.6827 - val_loss: 0.6484\n","Epoch 4/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.6470 - val_loss: 0.6191\n","Epoch 5/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.6191 - val_loss: 0.5942\n","Epoch 6/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.5963 - val_loss: 0.5745\n","Epoch 7/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.5757 - val_loss: 0.5565\n","Epoch 8/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.5575 - val_loss: 0.5374\n","Epoch 9/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.5410 - val_loss: 0.5214\n","Epoch 10/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.5279 - val_loss: 0.5085\n","Epoch 11/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.5151 - val_loss: 0.4972\n","Epoch 12/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.5032 - val_loss: 0.4872\n","Epoch 13/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.4936 - val_loss: 0.4779\n","Epoch 14/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.4857 - val_loss: 0.4699\n","Epoch 15/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.4791 - val_loss: 0.4631\n","Epoch 16/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.4719 - val_loss: 0.4581\n","Epoch 17/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.4675 - val_loss: 0.4530\n","Epoch 18/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.4600 - val_loss: 0.4475\n","Epoch 19/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.4549 - val_loss: 0.4431\n","Epoch 20/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.4504 - val_loss: 0.4376\n","162/162 [==============================] - 0s 877us/step - loss: 0.4590\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Hn_lbE9qP1dr","executionInfo":{"status":"ok","timestamp":1606322947572,"user_tz":300,"elapsed":25263,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["#Adding extra outputs --> multiple output example \n","#Adding auxiliary output for regularization \n","\n","input_A = keras.layers.Input(shape=[5],name='wide_input')\n","input_B = keras.layers.Input(shape=[6],name='deep_input')\n","hidden1=keras.layers.Dense(30,activation='relu')(input_B)\n","hidden2=keras.layers.Dense(30,activation='relu')(hidden1)\n","concat = keras.layers.concatenate([input_A,hidden2])\n","output = keras.layers.Dense(1,name='main_output')(concat)\n","aux_output=keras.layers.Dense(1,name='aux_output')(hidden2)\n","model=keras.Model(inputs=[input_A,input_B],outputs=[output,aux_output])"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ghg8dL73RwMO","executionInfo":{"status":"ok","timestamp":1606322959082,"user_tz":300,"elapsed":36762,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"2e944b6a-dac9-4510-8e6b-bb871db4f795"},"source":["#Set loss function and loss weight for each output \n","\n","model.compile(loss=['mse','mse'],loss_weights=[0.9,0.1],optimizer='sgd')\n","\n","#pass y_train,y_test, and y_val twice for each output \n","history=model.fit(\n","    [X_train_A,X_train_B],[y_train,y_train],epochs=20,\n","    validation_data=([X_valid_A,X_valid_B],(y_valid,y_valid))\n",")\n","\n","total_loss,main_loss,aux_loss=model.evaluate(\n","    [X_test_A,X_test_B],[y_test,y_test]\n",")\n","y_pred_main, y_pred_aux = model.predict([X_new_A,X_new_B])"],"execution_count":7,"outputs":[{"output_type":"stream","text":["Epoch 1/20\n","363/363 [==============================] - 1s 2ms/step - loss: 0.9670 - main_output_loss: 0.7991 - aux_output_loss: 2.4786 - val_loss: 0.5536 - val_main_output_loss: 0.4841 - val_aux_output_loss: 1.1790\n","Epoch 2/20\n","363/363 [==============================] - 1s 1ms/step - loss: 0.5284 - main_output_loss: 0.4653 - aux_output_loss: 1.0958 - val_loss: 0.5889 - val_main_output_loss: 0.5477 - val_aux_output_loss: 0.9591\n","Epoch 3/20\n","363/363 [==============================] - 1s 1ms/step - loss: 0.4904 - main_output_loss: 0.4435 - aux_output_loss: 0.9122 - val_loss: 0.4593 - val_main_output_loss: 0.4172 - val_aux_output_loss: 0.8383\n","Epoch 4/20\n","363/363 [==============================] - 1s 1ms/step - loss: 0.4668 - main_output_loss: 0.4306 - aux_output_loss: 0.7925 - val_loss: 0.4506 - val_main_output_loss: 0.4197 - val_aux_output_loss: 0.7291\n","Epoch 5/20\n","363/363 [==============================] - 1s 1ms/step - loss: 0.4466 - main_output_loss: 0.4173 - aux_output_loss: 0.7112 - val_loss: 0.4336 - val_main_output_loss: 0.4062 - val_aux_output_loss: 0.6801\n","Epoch 6/20\n","363/363 [==============================] - 1s 1ms/step - loss: 0.4388 - main_output_loss: 0.4148 - aux_output_loss: 0.6552 - val_loss: 0.4224 - val_main_output_loss: 0.3994 - val_aux_output_loss: 0.6301\n","Epoch 7/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.4239 - main_output_loss: 0.4024 - aux_output_loss: 0.6177 - val_loss: 0.4197 - val_main_output_loss: 0.3990 - val_aux_output_loss: 0.6062\n","Epoch 8/20\n","363/363 [==============================] - 1s 1ms/step - loss: 0.4165 - main_output_loss: 0.3968 - aux_output_loss: 0.5939 - val_loss: 0.4119 - val_main_output_loss: 0.3943 - val_aux_output_loss: 0.5706\n","Epoch 9/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.4114 - main_output_loss: 0.3931 - aux_output_loss: 0.5761 - val_loss: 0.4004 - val_main_output_loss: 0.3833 - val_aux_output_loss: 0.5540\n","Epoch 10/20\n","363/363 [==============================] - 1s 2ms/step - loss: 0.4049 - main_output_loss: 0.3875 - aux_output_loss: 0.5620 - val_loss: 0.3990 - val_main_output_loss: 0.3828 - val_aux_output_loss: 0.5455\n","Epoch 11/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.3988 - main_output_loss: 0.3824 - aux_output_loss: 0.5469 - val_loss: 0.4127 - val_main_output_loss: 0.3993 - val_aux_output_loss: 0.5340\n","Epoch 12/20\n","363/363 [==============================] - 1s 1ms/step - loss: 0.3977 - main_output_loss: 0.3813 - aux_output_loss: 0.5456 - val_loss: 0.3871 - val_main_output_loss: 0.3718 - val_aux_output_loss: 0.5252\n","Epoch 13/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.3906 - main_output_loss: 0.3748 - aux_output_loss: 0.5322 - val_loss: 0.3788 - val_main_output_loss: 0.3634 - val_aux_output_loss: 0.5170\n","Epoch 14/20\n","363/363 [==============================] - 1s 1ms/step - loss: 0.3879 - main_output_loss: 0.3729 - aux_output_loss: 0.5230 - val_loss: 0.3859 - val_main_output_loss: 0.3719 - val_aux_output_loss: 0.5121\n","Epoch 15/20\n","363/363 [==============================] - 1s 1ms/step - loss: 0.3933 - main_output_loss: 0.3793 - aux_output_loss: 0.5187 - val_loss: 0.3775 - val_main_output_loss: 0.3632 - val_aux_output_loss: 0.5062\n","Epoch 16/20\n","363/363 [==============================] - 1s 1ms/step - loss: 0.3809 - main_output_loss: 0.3664 - aux_output_loss: 0.5112 - val_loss: 0.3740 - val_main_output_loss: 0.3601 - val_aux_output_loss: 0.4993\n","Epoch 17/20\n","363/363 [==============================] - 0s 1ms/step - loss: 0.3779 - main_output_loss: 0.3638 - aux_output_loss: 0.5053 - val_loss: 0.3665 - val_main_output_loss: 0.3530 - val_aux_output_loss: 0.4881\n","Epoch 18/20\n","363/363 [==============================] - 1s 1ms/step - loss: 0.3733 - main_output_loss: 0.3594 - aux_output_loss: 0.4978 - val_loss: 0.3726 - val_main_output_loss: 0.3591 - val_aux_output_loss: 0.4941\n","Epoch 19/20\n","363/363 [==============================] - 1s 1ms/step - loss: 0.3708 - main_output_loss: 0.3574 - aux_output_loss: 0.4915 - val_loss: 0.3657 - val_main_output_loss: 0.3527 - val_aux_output_loss: 0.4829\n","Epoch 20/20\n","363/363 [==============================] - 1s 1ms/step - loss: 0.3669 - main_output_loss: 0.3538 - aux_output_loss: 0.4846 - val_loss: 0.3613 - val_main_output_loss: 0.3486 - val_aux_output_loss: 0.4752\n","162/162 [==============================] - 0s 903us/step - loss: 0.3862 - main_output_loss: 0.3737 - aux_output_loss: 0.4985\n"],"name":"stdout"}]}]}