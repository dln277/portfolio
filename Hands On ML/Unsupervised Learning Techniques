{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Unsupervised Learning Techniques","provenance":[],"authorship_tag":"ABX9TyNGDodjIl3k9d5QA21pTQCa"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"HvnHHvhOZ7ln"},"source":["#KMeans Clustering \n","\n","from sklearn.cluster import KMeans \n","k=5\n","kmeans = KMeans(n_clusters=k)\n","y = kmeans.fit_predict(X)\n","\n","kmeans.cluster_centers_ #take a look at the centroids \n","\n","#assign new instances to closest cluster \n","X_new = np.array([[0,2],[3,2],[-3,3],[-3,2.5]])\n","kmeans.predict(X_new)\n","kmeans.transform(X_new) #measure distance of each instance to each centroid \n","\n","#Centroid initilization method \n","\n","good_init = np.array([[-3,3],[-3,2],[-3,1],[-1,2],[0,2]])\n","kmeans = KMeans(n_clusters=5, init=good_init, n_init=1)\n","kmeans.inertia \n","kmeans.scores(X)\n","\n","\n","#Mini batch K Means \n","\n","from sklearn.cluster import MiniBatchKMeans\n","minibatch_kmeans=MiniBatchKMeans(n_clusters=5)\n","minibatch_kmeans.fit(X)\n","\n","#Choosing number of clusters with silhouette score \n","\n","from sklearn.metrics import silhouette_score \n","silhouette_score(X,kmeans.labels_)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"aGYc0iIIjU5o"},"source":["#Image segmentation \n","\n","from matplotlib.image import imread \n","image = imread(os.path.join('images','unsupervised_learning','ladybug.png'))\n","X = image.reshape(-1,3)\n","kmeans = KMeans(n_clusters=8).fit(X)\n","segmented_img = kmeans.cluster_centers_[kmeans.labels_]\n","segmented_img = segmented_img.reshape(image.shape)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"KXskDmAOk6PU"},"source":["#Using clustering for preprocessing \n","\n","from sklearn.databases import load_digits \n","X_digits, y_digits=load_digits(return_X_y=True)\n","from sklearn.model_selection import train_test_split \n","X_train, X_test, y_train, y_test = train_test_split(X_digits,y_digits)\n","from sklearn.linear_model import LogisticRegression \n","log_reg = LogisticRegression()\n","log_reg.fit(X_train,y_train)\n","from sklearn.pipeline import Pipeline \n","pipeline=Pipeline([\n","                   ('kmeans',KMeans(n_clusters=50)),\n","                   ('log_reg',LogisticRegression()),\n","])\n","pipeline.fit(X_train,y_train)\n","pipeline.score(X_test,y_test)\n","\n","#Choosing the optimal k \n","\n","from sklearn.model_selection import GridSearchCV\n","param_grid=dict(kmeans__n_clusters=range(2,100))\n","grid_clf=GridSearchCV(pipeline,param_grid,cv=3,verbose=2)\n","grid_clf.fit(X_train,y_train)\n","grid_clf.best_params_\n","grid_clf.score(X_test,y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QXf2JZs8NtU0"},"source":["#Using clustering for semi-supervised learning \n","\n","k = 50 \n","kmeans = KMeans(n_clusters=k)\n","X_digits_dist = kmeans.fit_transform(X_train)\n","representative_digit_idx = np.argmin(X_digits_dist,axis=0)\n","X_representative_digits = X_train[representative_digit_idx]\n","#manually label images \n","y_representative_digits = np.array([4,8,0,6,8,3,...,7,6,2,3,1,1])\n","log_reg=LogisticRegression()\n","log_reg.fit(X_representative_digits,y_representative_digits)\n","log_reg.score(X_test,y_test)\n","\n","#propagate label to all other instances in same cluster\n","y_train_propagated = np.empty(len(X_train),dtype=np.int32)\n","for i in range(k):\n","  y_train_propagated[keans.labels_==i] = y_representative_digits[i]\n","#retrain model\n","log_reg.fit(X_train,y_train_propagated)\n","log_reg.score(X_test,y_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"a2mVgSV8HK8A"},"source":["#DBSCAN\n","\n","from sklearn.clustering import DBSCAN\n","from sklearn.datasets import make_moons \n","\n","X,y=make_moons(n_samples=1000,noise=0.05)\n","dbscan=DBSCAN(eps=0.05,min_samples=5)\n","dbscan.fit(X)\n","dbscan.labels_\n","len(dbscan.core_samples_indices_)\n","dbscan.core_samples_indices \n","dbscan.components_\n","\n","#dbscan does not have a predict() method --> incorporate knn \n","\n","from sklearn.neighbors import KNeighborsClassifier \n","knn=KNeighborsClassifier(n_neighbors=50)\n","knn.fit(dbscan.components_,dbscan.labels_[dbscan.score_sample_indices_])\n","X_new = np.array([[0.5,0],[0,0.5],[1,0.1],[0.1,1])\n","knn.predict(X_new)\n","knn.predict_proba(X_new)\n","#finding the distance and inces of the k nearest neighbors \n","y_dist,y_pred_idx=knn.kneighbors(X_new,n_neighbors=1)\n","y_pred=dbscan.labels_[dbscan.core_sample_indices_][y_pred_idx]\n","y_pred[y_dist > 0.2] = -1 \n","y_pred.ravel()"],"execution_count":null,"outputs":[]}]}