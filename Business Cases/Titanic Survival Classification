{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Titanic Survival Classification","provenance":[],"authorship_tag":"ABX9TyN9O//QhBkEA4IVZEWLWt9s"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"2q6k76fIqHAt"},"source":["**1. Big Picture**\n","Objective: predict who would survive and who would not \n","Target variable: survival\n","Feature var: 9 variables "]},{"cell_type":"markdown","metadata":{"id":"BcvQJzqasyHC"},"source":["**2. Data Preparation**\n","- Quick overview of the data structure \n","- Remove unneccessary features\n","- Deal with missing values: remove NaN and impute accordingly \n","- Convert categorical variables \n","- Define x-variables, y-variables\n","- StandardScale numerical variables "]},{"cell_type":"code","metadata":{"id":"wGULzCN87R59","executionInfo":{"status":"ok","timestamp":1605215887054,"user_tz":300,"elapsed":301,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["import pandas as pd\n","dataset = pd.read_csv('train.csv')\n"],"execution_count":403,"outputs":[]},{"cell_type":"code","metadata":{"id":"8e0OC5BM9im3","executionInfo":{"status":"ok","timestamp":1605215887297,"user_tz":300,"elapsed":516,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"dae8e024-5ef5-45ff-a389-a1d37d19359a","colab":{"base_uri":"https://localhost:8080/"}},"source":["dataset.info()"],"execution_count":404,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     889 non-null    object \n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.7+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"VmjyMdzO9t7-","executionInfo":{"status":"ok","timestamp":1605215887301,"user_tz":300,"elapsed":506,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"592d2607-b08f-4f63-ae01-c3b6ed12e080","colab":{"base_uri":"https://localhost:8080/","height":297}},"source":["dataset.describe()"],"execution_count":405,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>714.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>446.000000</td>\n","      <td>0.383838</td>\n","      <td>2.308642</td>\n","      <td>29.699118</td>\n","      <td>0.523008</td>\n","      <td>0.381594</td>\n","      <td>32.204208</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>257.353842</td>\n","      <td>0.486592</td>\n","      <td>0.836071</td>\n","      <td>14.526497</td>\n","      <td>1.102743</td>\n","      <td>0.806057</td>\n","      <td>49.693429</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.420000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>223.500000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>20.125000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>7.910400</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>446.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>28.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>14.454200</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>668.500000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>38.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>31.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>891.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>80.000000</td>\n","      <td>8.000000</td>\n","      <td>6.000000</td>\n","      <td>512.329200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare\n","count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000\n","mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208\n","std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429\n","min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000\n","25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400\n","50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200\n","75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000\n","max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200\n","\n","[8 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":405}]},{"cell_type":"code","metadata":{"id":"Q28eVRI8Z9Fm","executionInfo":{"status":"ok","timestamp":1605215887304,"user_tz":300,"elapsed":498,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["#Drop redundant variables\n","#Only need one meta variable; therefore, drop PassengerId and Ticket\n","dataset = dataset.drop(columns=['PassengerId','Name','Ticket'])"],"execution_count":406,"outputs":[]},{"cell_type":"code","metadata":{"id":"jrfzgOIVR959","executionInfo":{"status":"ok","timestamp":1605215887537,"user_tz":300,"elapsed":720,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"31c6b4ae-2d6f-4b19-f90f-e957fe6a0e80","colab":{"base_uri":"https://localhost:8080/","height":265}},"source":["#Quickly examining the age distributions\n","import matplotlib.pyplot as plt\n","dataset['Age'].hist()\n","plt.show()"],"execution_count":407,"outputs":[{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAAAXcAAAD4CAYAAAAXUaZHAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAUPUlEQVR4nO3df5Dcd33f8ee7duIoOkayY7Ojym7PTIwZ8AWBbhwySZk7nARhGBwyjGONh1rBrWAGUtK5mVROOoGUYcZtEbQdWhIROyY/qjPFGDwyCXFdX2g6BXICxZIxBhtEYtWRwDZyzmhczrz7x36vLOc73+1+96v96qPnY2bn9vv57vf7fem+X71u77vf3YvMRJJUln8w6gCSpOGz3CWpQJa7JBXIcpekAlnuklSgc0cdAODCCy/M8fHxvpd7+umn2bhx4/AD1WSu/rU1m7n609Zc0N5sdXIdPHjw25l50YozM3Pkt+3bt+cg7rvvvoGWa5q5+tfWbObqT1tzZbY3W51cwHyu0quelpGkAlnuklQgy12SCmS5S1KBLHdJKpDlLkkFstwlqUCWuyQVaM1yj4hbI+JERBzpGbs9Ig5Vt6MRcagaH4+IUz3zfrfJ8JKkla3n4wduAz4E/OHSQGb+ytL9iNgLnOx5/COZuW1YAfVc43vuHmi5mYlFdg247JKjN7++1vKSTo81yz0zPxsR4yvNi4gArgVeM9xYkqQ6ItfxZ/aqcj+QmVcsG3818IHMnOx53APAV4GngH+dmf9zlXXuBnYDdDqd7bOzs32HX1hYYGxsrO/lmtZ0rsPHTq79oBV0NsDxU/W2PbF1U70VrOJs3ZeDMlf/2pqtTq7p6emDS/27XN1PhdwJ7O+Zfgz4R5n5eERsBz4ZES/LzKeWL5iZ+4B9AJOTkzk1NdX3xufm5hhkuaY1nWvQUyszE4vsPVxvlx+9fqrW8qs5W/floMzVv7ZmayrXwFfLRMS5wC8Dty+NZeYzmfl4df8g8Ajw4rohJUn9qXMp5M8DX8nMR5cGIuKiiDinuv8i4DLg6/UiSpL6tZ5LIfcD/xu4PCIejYgbq1nX8cOnZABeDdxfXRr5ceDtmfnEMANLkta2nqtldq4yvmuFsTuAO+rHkiTV4TtUJalArfgbqjpzDPoGqrWs9QYr3zwl9cdn7pJUIMtdkgpkuUtSgSx3SSqQ5S5JBbLcJalAlrskFchyl6QCWe6SVCDLXZIKZLlLUoEsd0kqkOUuSQWy3CWpQJa7JBXIcpekAlnuklQgy12SCrRmuUfErRFxIiKO9Iy9JyKORcSh6nZ1z7ybIuLhiHgoIl7bVHBJ0urW88z9NmDHCuMfzMxt1e3TABHxUuA64GXVMv8lIs4ZVlhJ0vqsWe6Z+VngiXWu7xpgNjOfycxvAA8DV9bIJ0kaQGTm2g+KGAcOZOYV1fR7gF3AU8A8MJOZT0bEh4DPZeYfV4+7BfjTzPz4CuvcDewG6HQ622dnZ/sOv7CwwNjYWN/LNa3pXIePnRxouc4GOH5qyGGGZK1sE1s3nb4wPc7WY2xQbc0F7c1WJ9f09PTBzJxcad65A+b5MPBeIKuve4G39rOCzNwH7AOYnJzMqampvkPMzc0xyHJNazrXrj13D7TczMQiew8PusubtVa2o9dPnb4wPc7WY2xQbc0F7c3WVK6BrpbJzOOZ+Wxmfh/4CD849XIMuKTnoRdXY5Kk02igco+ILT2TbwKWrqS5C7guIs6LiEuBy4Av1IsoSerXmr+jR8R+YAq4MCIeBd4NTEXENrqnZY4CbwPIzAci4mPAl4FF4B2Z+Wwz0SVJq1mz3DNz5wrDtzzP498HvK9OKElSPb5DVZIKZLlLUoEsd0kqkOUuSQWy3CWpQJa7JBXIcpekAlnuklQgy12SCmS5S1KBLHdJKpDlLkkFstwlqUCWuyQVyHKXpAJZ7pJUIMtdkgpkuUtSgSx3SSqQ5S5JBVqz3CPi1og4ERFHesb+fUR8JSLuj4g7I2JzNT4eEaci4lB1+90mw0uSVraeZ+63ATuWjd0DXJGZPwV8FbipZ94jmbmtur19ODElSf1Ys9wz87PAE8vG/jwzF6vJzwEXN5BNkjSgYZxzfyvwpz3Tl0bElyLiLyLinwxh/ZKkPkVmrv2giHHgQGZesWz8t4BJ4JczMyPiPGAsMx+PiO3AJ4GXZeZTK6xzN7AboNPpbJ+dne07/MLCAmNjY30v17Smcx0+dnKg5Tob4PipIYcZkrWyTWzddPrC9Dhbj7FBtTUXtDdbnVzT09MHM3NypXnnDhooInYBbwCuyuonRGY+AzxT3T8YEY8ALwbmly+fmfuAfQCTk5M5NTXVd4a5uTkGWa5pTefatefugZabmVhk7+GBd3mj1sp29Pqp0xemx9l6jA2qrbmgvdmayjXQaZmI2AH8BvDGzPxuz/hFEXFOdf9FwGXA14cRVJK0fms+jYuI/cAUcGFEPAq8m+7VMecB90QEwOeqK2NeDfybiPge8H3g7Zn5xIorliQ1Zs1yz8ydKwzfsspj7wDuqBtKklSP71CVpAJZ7pJUIMtdkgrUzuvipGXGB7z8s66ZiUWmRrJlqR6fuUtSgSx3SSqQ5S5JBbLcJalAlrskFchyl6QCWe6SVCDLXZIKZLlLUoEsd0kqkOUuSQWy3CWpQJa7JBXIcpekAlnuklQgy12SCmS5S1KB1lXuEXFrRJyIiCM9YxdExD0R8bXq6/nVeETEf4qIhyPi/oh4ZVPhJUkrW+8z99uAHcvG9gD3ZuZlwL3VNMDrgMuq227gw/VjSpL6sa5yz8zPAk8sG74G+Gh1/6PAL/WM/2F2fQ7YHBFbhhFWkrQ+kZnre2DEOHAgM6+opr+TmZur+wE8mZmbI+IAcHNm/mU1717gX2Xm/LL17ab7zJ5Op7N9dna27/ALCwuMjY31vVzTms51+NjJgZbrbIDjp4YcZkjamq2zAV54waZRx3iOs/XYr6Ot2erkmp6ePpiZkyvNO7dWqkpmZkSs76fED5bZB+wDmJyczKmpqb63Ozc3xyDLNa3pXLv23D3QcjMTi+w9PJRdPnRtzTYzsci1Z+ExNqi25oL2ZmsqV52rZY4vnW6pvp6oxo8Bl/Q87uJqTJJ0mtQp97uAG6r7NwCf6hn/p9VVM68CTmbmYzW2I0nq07p+D46I/cAUcGFEPAq8G7gZ+FhE3Ah8E7i2evingauBh4HvAr865MySpDWsq9wzc+cqs65a4bEJvKNOKElSPb5DVZIKZLlLUoEsd0kqkOUuSQWy3CWpQJa7JBXIcpekAlnuklQgy12SCmS5S1KBLHdJKpDlLkkFstwlqUCWuyQVyHKXpAJZ7pJUIMtdkgpkuUtSgSx3SSqQ5S5JBVrXH8heSURcDtzeM/Qi4LeBzcA/B75Vjf9mZn564ISSpL4NXO6Z+RCwDSAizgGOAXcCvwp8MDPfP5SEkqS+Deu0zFXAI5n5zSGtT5JUQ2Rm/ZVE3Ap8MTM/FBHvAXYBTwHzwExmPrnCMruB3QCdTmf77Oxs39tdWFhgbGysRvJmNJ3r8LGTAy3X2QDHTw05zJC0NVtnA7zwgk2jjvEcZ+uxX0dbs9XJNT09fTAzJ1eaV7vcI+JHgf8DvCwzj0dEB/g2kMB7gS2Z+dbnW8fk5GTOz8/3ve25uTmmpqb6D92wpnON77l7oOVmJhbZe3jgM3GNamu2mYlFfu36a0Yd4znO1mO/jrZmq5MrIlYt92Gclnkd3WftxwEy83hmPpuZ3wc+Alw5hG1IkvowjHLfCexfmoiILT3z3gQcGcI2JEl9qPV7cERsBH4BeFvP8L+LiG10T8scXTZPknQa1Cr3zHwa+IllY2+plUiSVFv7XsGSWmbQF7DrOnrz60eyXZXBjx+QpAJZ7pJUIMtdkgpkuUtSgSx3SSqQ5S5JBbLcJalAlrskFchyl6QCWe6SVCDLXZIKZLlLUoEsd0kqkOUuSQWy3CWpQJa7JBXIcpekAlnuklSgIv7Mnn8GTZJ+WO1yj4ijwN8DzwKLmTkZERcAtwPjwFHg2sx8su62JEnrM6zTMtOZuS0zJ6vpPcC9mXkZcG81LUk6TZo6534N8NHq/keBX2poO5KkFURm1ltBxDeAJ4EEfi8z90XEdzJzczU/gCeXpnuW2w3sBuh0OttnZ2f73vbCwgJjY2McPnay1r9hUBNbN604vpSrKYP+ezsb4PipIYcZkrZmG2Wu1Y4vaP4YG1Rbc0F7s9XJNT09fbDnjMkPGUa5b83MYxHxQuAe4NeAu3rLPCKezMzzV1vH5ORkzs/P973tubk5pqamWveC6lKupgz6752ZWGTv4Xa+ht7WbKPM9Xwv2Dd9jA2qrbmgvdnq5IqIVcu99mmZzDxWfT0B3AlcCRyPiC3VxrcAJ+puR5K0frXKPSI2RsQLlu4DvwgcAe4CbqgedgPwqTrbkST1p+7vmx3gzu5pdc4F/mtm/llE/BXwsYi4EfgmcG3N7UiS+lCr3DPz68DLVxh/HLiqzrrPBKud+56ZWGTXiF4HkCQo5B2qUome74Xzpp9A+O7rM5+fLSNJBbLcJalAlrskFchyl6QCWe6SVCDLXZIKZLlLUoEsd0kqkOUuSQWy3CWpQJa7JBXIcpekAlnuklQgy12SCmS5S1KBLHdJKpDlLkkFstwlqUCWuyQVaOByj4hLIuK+iPhyRDwQEe+qxt8TEcci4lB1u3p4cSVJ61HnD2QvAjOZ+cWIeAFwMCLuqeZ9MDPfXz+eJGkQA5d7Zj4GPFbd//uIeBDYOqxgkqTBDeWce0SMA68APl8NvTMi7o+IWyPi/GFsQ5K0fpGZ9VYQMQb8BfC+zPxERHSAbwMJvBfYkplvXWG53cBugE6ns312drbvbS8sLDA2NsbhYyfr/BOGrrMBjp8adYrnamsuaG+2szXXxNZNAy239H+yjdqarU6u6enpg5k5udK8WuUeET8CHAA+k5kfWGH+OHAgM694vvVMTk7m/Px839ufm5tjamqK8T13971sk2YmFtl7uM7LGc1oay5obzZz9adurqM3v36IaX7YUl+0TZ1cEbFqude5WiaAW4AHe4s9Irb0POxNwJFBtyFJGkydH/0/C7wFOBwRh6qx3wR2RsQ2uqdljgJvq5VQktS3OlfL/CUQK8z69OBxJEnD4DtUJalAlrskFchyl6QCWe6SVCDLXZIKZLlLUoEsd0kqkOUuSQWy3CWpQJa7JBXIcpekAlnuklQgy12SCtS+T/uXdNZq8g/vzEwssmuV9Tf5R0JGxWfuklQgy12SCmS5S1KBLHdJKpDlLkkFstwlqUCWuyQVqLHr3CNiB/AfgXOA38/Mm5valiTV0eT19Wu5bcfGRtbbyDP3iDgH+M/A64CXAjsj4qVNbEuS9FxNnZa5Eng4M7+emf8XmAWuaWhbkqRlIjOHv9KINwM7MvOfVdNvAX46M9/Z85jdwO5q8nLgoQE2dSHw7Zpxm2Cu/rU1m7n609Zc0N5sdXL948y8aKUZI/tsmczcB+yrs46ImM/MySFFGhpz9a+t2czVn7bmgvZmaypXU6dljgGX9ExfXI1Jkk6Dpsr9r4DLIuLSiPhR4Drgroa2JUlappHTMpm5GBHvBD5D91LIWzPzgQY2Veu0ToPM1b+2ZjNXf9qaC9qbrZFcjbygKkkaLd+hKkkFstwlqUBnZLlHxI6IeCgiHo6IPSPOcmtEnIiIIz1jF0TEPRHxterr+SPIdUlE3BcRX46IByLiXW3IFhE/FhFfiIi/rnL9TjV+aUR8vtqnt1cvxJ92EXFORHwpIg60LNfRiDgcEYciYr4aa8NxtjkiPh4RX4mIByPiZ0adKyIur75PS7enIuLXR52ryvYvq+P+SETsr/4/NHKMnXHl3sKPNrgN2LFsbA9wb2ZeBtxbTZ9ui8BMZr4UeBXwjur7NOpszwCvycyXA9uAHRHxKuDfAh/MzJ8EngRuPM25lrwLeLBnui25AKYzc1vPNdGj3pfQ/fyoP8vMlwAvp/u9G2muzHyo+j5tA7YD3wXuHHWuiNgK/AtgMjOvoHuxyXU0dYxl5hl1A34G+EzP9E3ATSPONA4c6Zl+CNhS3d8CPNSC79ungF9oUzbgx4EvAj9N9x165660j09jnovp/qd/DXAAiDbkqrZ9FLhw2dhI9yWwCfgG1YUZbcm1LMsvAv+rDbmArcDfAhfQvVLxAPDapo6xM+6ZOz/4Bi15tBprk05mPlbd/zugM8owETEOvAL4PC3IVp36OAScAO4BHgG+k5mL1UNGtU//A/AbwPer6Z9oSS6ABP48Ig5WH90Bo9+XlwLfAv6gOpX1+xGxsQW5el0H7K/ujzRXZh4D3g/8DfAYcBI4SEPH2JlY7meU7P44Htn1phExBtwB/HpmPtU7b1TZMvPZ7P7KfDHdD5l7yenOsFxEvAE4kZkHR51lFT+Xma+kezryHRHx6t6ZI9qX5wKvBD6cma8AnmbZqY5RHv/Vues3Av9t+bxR5KrO8V9D94fiPwQ28txTukNzJpb7mfDRBscjYgtA9fXEKEJExI/QLfY/ycxPtCkbQGZ+B7iP7q+imyNi6U11o9inPwu8MSKO0v0U09fQPZ886lzA/3/WR2aeoHv++EpGvy8fBR7NzM9X0x+nW/ajzrXkdcAXM/N4NT3qXD8PfCMzv5WZ3wM+Qfe4a+QYOxPL/Uz4aIO7gBuq+zfQPd99WkVEALcAD2bmB9qSLSIuiojN1f0NdF8HeJBuyb95VLky86bMvDgzx+keU/8jM68fdS6AiNgYES9Yuk/3PPIRRrwvM/PvgL+NiMuroauAL486V4+d/OCUDIw+198Ar4qIH6/+fy59v5o5xkb1QkfNFyauBr5K91ztb404y36658++R/eZzI10z9XeC3wN+O/ABSPI9XN0f+28HzhU3a4edTbgp4AvVbmOAL9djb8I+ALwMN1fo88b4T6dAg60JVeV4a+r2wNLx/yo92WVYRswX+3PTwLntyTXRuBxYFPPWBty/Q7wlerY/yPgvKaOMT9+QJIKdCaelpEkrcFyl6QCWe6SVCDLXZIKZLlLUoEsd0kqkOUuSQX6f6EjqSprEB7OAAAAAElFTkSuQmCC\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"mvtLbPjr-Vhg","executionInfo":{"status":"ok","timestamp":1605215887538,"user_tz":300,"elapsed":708,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["#Remove N/A and impute with median age \n","#Median is chosen since the distribution is slightly right skewed. Median is close to mean, but is smaller, suggesting a younger population on the boat\n","#Convert Age to correct datatype \n","import numpy as np\n","\n","median_age = dataset['Age'].median()\n","dataset['Age'] = dataset['Age'].replace(np.nan,median_age)"],"execution_count":408,"outputs":[]},{"cell_type":"code","metadata":{"id":"1ZPVCoapyjy1","executionInfo":{"status":"ok","timestamp":1605215887540,"user_tz":300,"elapsed":701,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["#Remove NaN in Embarked\n","dataset = dataset.dropna(subset=['Embarked'])\n","dataset = dataset.reset_index(drop=True)"],"execution_count":409,"outputs":[]},{"cell_type":"code","metadata":{"id":"9Dfl4s95Q-dV","executionInfo":{"status":"ok","timestamp":1605215887543,"user_tz":300,"elapsed":695,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"f90e89ac-b20a-4a7c-fbaf-20a16c17e1ec","colab":{"base_uri":"https://localhost:8080/"}},"source":["print(dataset)"],"execution_count":410,"outputs":[{"output_type":"stream","text":["     Survived  Pclass     Sex   Age  SibSp  Parch     Fare Cabin Embarked\n","0           0       3    male  22.0      1      0   7.2500   NaN        S\n","1           1       1  female  38.0      1      0  71.2833   C85        C\n","2           1       3  female  26.0      0      0   7.9250   NaN        S\n","3           1       1  female  35.0      1      0  53.1000  C123        S\n","4           0       3    male  35.0      0      0   8.0500   NaN        S\n","..        ...     ...     ...   ...    ...    ...      ...   ...      ...\n","884         0       2    male  27.0      0      0  13.0000   NaN        S\n","885         1       1  female  19.0      0      0  30.0000   B42        S\n","886         0       3  female  28.0      1      2  23.4500   NaN        S\n","887         1       1    male  26.0      0      0  30.0000  C148        C\n","888         0       3    male  32.0      0      0   7.7500   NaN        Q\n","\n","[889 rows x 9 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EJPgnAbQQMyW","executionInfo":{"status":"ok","timestamp":1605215887545,"user_tz":300,"elapsed":686,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"e8fb4d33-2d2f-414e-e796-159d62d30f5e","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Deal with Cabin missing values \n","dataset['Cabin'].value_counts()"],"execution_count":411,"outputs":[{"output_type":"execute_result","data":{"text/plain":["G6             4\n","B96 B98        4\n","C23 C25 C27    4\n","D              3\n","C22 C26        3\n","              ..\n","C90            1\n","C45            1\n","E17            1\n","B79            1\n","C7             1\n","Name: Cabin, Length: 146, dtype: int64"]},"metadata":{"tags":[]},"execution_count":411}]},{"cell_type":"code","metadata":{"id":"AbpBmTtgY1aL","executionInfo":{"status":"ok","timestamp":1605215887546,"user_tz":300,"elapsed":676,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"0f840213-6e8d-40e8-fb63-57b36c985664","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Since only a small proportion of the passengers have their cabins recorded\n","#Since each passenger(and their family) stay in one cabin, we will transform this variable as binary, representing whether or not they were assigned a cabin/if the cabin number was recorded \n","\n","dataset['Cabin'] = dataset['Cabin'].notnull().astype('int')\n","dataset['Cabin'] = dataset['Cabin'].fillna(0)\n","print(dataset['Cabin'])"],"execution_count":412,"outputs":[{"output_type":"stream","text":["0      0\n","1      1\n","2      0\n","3      1\n","4      0\n","      ..\n","884    0\n","885    1\n","886    0\n","887    1\n","888    0\n","Name: Cabin, Length: 889, dtype: int64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"wzKTqirE9g1R","executionInfo":{"status":"ok","timestamp":1605215887547,"user_tz":300,"elapsed":667,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["#Transforming other categorical variables\n","#Starting with Sex \n","\n","from sklearn.preprocessing import OneHotEncoder\n","cat_encoder = OneHotEncoder()\n","sex_cat=cat_encoder.fit_transform(dataset[['Sex']])\n","sex_cat = sex_cat.toarray()"],"execution_count":413,"outputs":[]},{"cell_type":"code","metadata":{"id":"-XuuqCoRkbZc","executionInfo":{"status":"ok","timestamp":1605215887712,"user_tz":300,"elapsed":824,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["#Transform Embarked\n","\n","embarked_cat=cat_encoder.fit_transform(dataset[['Embarked']])\n","embarked_cat = embarked_cat.toarray()"],"execution_count":414,"outputs":[]},{"cell_type":"code","metadata":{"id":"UtypzDmil7uB","executionInfo":{"status":"ok","timestamp":1605215887714,"user_tz":300,"elapsed":815,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"c11a5a22-29a4-4a0d-a837-7758b9b107e5","colab":{"base_uri":"https://localhost:8080/"}},"source":["# Creating pandas dataframe from numpy array and linking them to the dataset \n","dataset_cat = pd.DataFrame({'Female': sex_cat[:, 0], 'Male': sex_cat[:, 1], 'S_Port':embarked_cat[:,2], 'C_Port':embarked_cat[:,0],'Q_Port':embarked_cat[:,1]})\n","print(dataset_cat)"],"execution_count":415,"outputs":[{"output_type":"stream","text":["     Female  Male  S_Port  C_Port  Q_Port\n","0       0.0   1.0     1.0     0.0     0.0\n","1       1.0   0.0     0.0     1.0     0.0\n","2       1.0   0.0     1.0     0.0     0.0\n","3       1.0   0.0     1.0     0.0     0.0\n","4       0.0   1.0     1.0     0.0     0.0\n","..      ...   ...     ...     ...     ...\n","884     0.0   1.0     1.0     0.0     0.0\n","885     1.0   0.0     1.0     0.0     0.0\n","886     1.0   0.0     1.0     0.0     0.0\n","887     0.0   1.0     0.0     1.0     0.0\n","888     0.0   1.0     0.0     0.0     1.0\n","\n","[889 rows x 5 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"fOKOG88G2-6v","executionInfo":{"status":"ok","timestamp":1605215896067,"user_tz":300,"elapsed":295,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"71f64913-8c0b-46c6-b143-43321a1b2459","colab":{"base_uri":"https://localhost:8080/"}},"source":["dataset = dataset.drop(columns=['Sex','Embarked'])\n","dataset = dataset.join(dataset_cat, how='outer')\n","print(dataset)"],"execution_count":416,"outputs":[{"output_type":"stream","text":["     Survived  Pclass   Age  SibSp  Parch  ...  Female  Male  S_Port  C_Port  Q_Port\n","0           0       3  22.0      1      0  ...     0.0   1.0     1.0     0.0     0.0\n","1           1       1  38.0      1      0  ...     1.0   0.0     0.0     1.0     0.0\n","2           1       3  26.0      0      0  ...     1.0   0.0     1.0     0.0     0.0\n","3           1       1  35.0      1      0  ...     1.0   0.0     1.0     0.0     0.0\n","4           0       3  35.0      0      0  ...     0.0   1.0     1.0     0.0     0.0\n","..        ...     ...   ...    ...    ...  ...     ...   ...     ...     ...     ...\n","884         0       2  27.0      0      0  ...     0.0   1.0     1.0     0.0     0.0\n","885         1       1  19.0      0      0  ...     1.0   0.0     1.0     0.0     0.0\n","886         0       3  28.0      1      2  ...     1.0   0.0     1.0     0.0     0.0\n","887         1       1  26.0      0      0  ...     0.0   1.0     0.0     1.0     0.0\n","888         0       3  32.0      0      0  ...     0.0   1.0     0.0     0.0     1.0\n","\n","[889 rows x 12 columns]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"XoOo4C0Ls8dg","executionInfo":{"status":"ok","timestamp":1605215905676,"user_tz":300,"elapsed":295,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"8fbdc34c-8cd1-489d-9139-697f1ba12104","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["#Standardize normalize numerical variables\n","\n","from sklearn.preprocessing import StandardScaler\n","sc = StandardScaler()\n","features = dataset[['Age','Fare']]\n","features = sc.fit_transform(features.values)\n","scaled_features = pd.DataFrame(features, columns = ['Age','Fare'])\n","dataset[['Age','Fare']] = scaled_features\n","dataset.head()"],"execution_count":417,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Female</th>\n","      <th>Male</th>\n","      <th>S_Port</th>\n","      <th>C_Port</th>\n","      <th>Q_Port</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>-0.563674</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>-0.500240</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.669217</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.788947</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>-0.255451</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-0.486650</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.438050</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0.422861</td>\n","      <td>1</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0.438050</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-0.484133</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass       Age  SibSp  ...  Male  S_Port  C_Port  Q_Port\n","0         0       3 -0.563674      1  ...   1.0     1.0     0.0     0.0\n","1         1       1  0.669217      1  ...   0.0     0.0     1.0     0.0\n","2         1       3 -0.255451      0  ...   0.0     1.0     0.0     0.0\n","3         1       1  0.438050      1  ...   0.0     1.0     0.0     0.0\n","4         0       3  0.438050      0  ...   1.0     1.0     0.0     0.0\n","\n","[5 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":417}]},{"cell_type":"code","metadata":{"id":"m2qOk3bp7bNW","executionInfo":{"status":"ok","timestamp":1605215917342,"user_tz":300,"elapsed":316,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["#set features and target variables \n","\n","X_train = dataset.iloc[:,1:].values\n","y_train = dataset.iloc[:,0].values"],"execution_count":418,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Vbmk9qSTt9tl"},"source":["**3. Transform Test Set**"]},{"cell_type":"code","metadata":{"id":"iheg1gQjxsYt","executionInfo":{"status":"ok","timestamp":1605215918790,"user_tz":300,"elapsed":368,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"02220180-1225-476e-f4a2-10809529b019","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["import pandas as pd\n","test = pd.read_csv('test.csv')\n","test.head()"],"execution_count":419,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>892</td>\n","      <td>3</td>\n","      <td>Kelly, Mr. James</td>\n","      <td>male</td>\n","      <td>34.5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>330911</td>\n","      <td>7.8292</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>893</td>\n","      <td>3</td>\n","      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n","      <td>female</td>\n","      <td>47.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>363272</td>\n","      <td>7.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>894</td>\n","      <td>2</td>\n","      <td>Myles, Mr. Thomas Francis</td>\n","      <td>male</td>\n","      <td>62.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>240276</td>\n","      <td>9.6875</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>895</td>\n","      <td>3</td>\n","      <td>Wirz, Mr. Albert</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>315154</td>\n","      <td>8.6625</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>896</td>\n","      <td>3</td>\n","      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n","      <td>female</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3101298</td>\n","      <td>12.2875</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Pclass  ... Cabin Embarked\n","0          892       3  ...   NaN        Q\n","1          893       3  ...   NaN        S\n","2          894       2  ...   NaN        Q\n","3          895       3  ...   NaN        S\n","4          896       3  ...   NaN        S\n","\n","[5 rows x 11 columns]"]},"metadata":{"tags":[]},"execution_count":419}]},{"cell_type":"code","metadata":{"id":"_kfQ9oPG0hEB","executionInfo":{"status":"ok","timestamp":1605215921120,"user_tz":300,"elapsed":375,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"36264a92-e076-4d01-bf62-d26290066e31","colab":{"base_uri":"https://localhost:8080/"}},"source":["test.info()"],"execution_count":420,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 418 entries, 0 to 417\n","Data columns (total 11 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  418 non-null    int64  \n"," 1   Pclass       418 non-null    int64  \n"," 2   Name         418 non-null    object \n"," 3   Sex          418 non-null    object \n"," 4   Age          332 non-null    float64\n"," 5   SibSp        418 non-null    int64  \n"," 6   Parch        418 non-null    int64  \n"," 7   Ticket       418 non-null    object \n"," 8   Fare         417 non-null    float64\n"," 9   Cabin        91 non-null     object \n"," 10  Embarked     418 non-null    object \n","dtypes: float64(2), int64(4), object(5)\n","memory usage: 36.0+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lzp3qJXdx_zA","executionInfo":{"status":"ok","timestamp":1605215923290,"user_tz":300,"elapsed":438,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"d21d4239-3097-4357-bd5d-ae26375d2998","colab":{"base_uri":"https://localhost:8080/","height":204}},"source":["#transform test set \n","test = test.drop(columns=['PassengerId','Name','Ticket'])\n","test['Age'] = test['Age'].replace(np.nan,median_age)\n","test['Cabin'] = test['Cabin'].notnull().astype('int')\n","test['Cabin'] = test['Cabin'].fillna(0)\n","test_sex_cat=cat_encoder.fit_transform(test[['Sex']])\n","test_sex_cat = test_sex_cat.toarray()\n","test_embarked_cat=cat_encoder.fit_transform(test[['Embarked']])\n","test_embarked_cat = test_embarked_cat.toarray()\n","test_cat = pd.DataFrame({'Female': test_sex_cat[:, 0], 'Male': test_sex_cat[:, 1], 'S_Port':test_embarked_cat[:,2], 'C_Port':test_embarked_cat[:,0],'Q_Port':test_embarked_cat[:,1]})\n","test = test.drop(columns=['Sex','Embarked'])\n","test = test.join(test_cat, how='outer')\n","test_features = test[['Age','Fare']]\n","test_features = sc.fit_transform(test_features.values)\n","test_scaled_features = pd.DataFrame(test_features, columns = ['Age','Fare'])\n","test[['Age','Fare']] = test_scaled_features\n","test.head()"],"execution_count":421,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Female</th>\n","      <th>Male</th>\n","      <th>S_Port</th>\n","      <th>C_Port</th>\n","      <th>Q_Port</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3</td>\n","      <td>0.371062</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-0.497811</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3</td>\n","      <td>1.358985</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>-0.512660</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2.544493</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-0.464532</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>-0.221692</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-0.482888</td>\n","      <td>0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3</td>\n","      <td>-0.616861</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>-0.417971</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>0.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Pclass       Age  SibSp  Parch  ...  Male  S_Port  C_Port  Q_Port\n","0       3  0.371062      0      0  ...   1.0     0.0     0.0     1.0\n","1       3  1.358985      1      0  ...   0.0     1.0     0.0     0.0\n","2       2  2.544493      0      0  ...   1.0     0.0     0.0     1.0\n","3       3 -0.221692      0      0  ...   1.0     1.0     0.0     0.0\n","4       3 -0.616861      1      1  ...   0.0     1.0     0.0     0.0\n","\n","[5 rows x 11 columns]"]},"metadata":{"tags":[]},"execution_count":421}]},{"cell_type":"code","metadata":{"id":"Pv6nvdOacyfx","executionInfo":{"status":"ok","timestamp":1605218079236,"user_tz":300,"elapsed":456,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["test = test.dropna(subset=['Fare'])\n","test = test.reset_index(drop=True)"],"execution_count":436,"outputs":[]},{"cell_type":"code","metadata":{"id":"CicWX1SAdBvy","executionInfo":{"status":"ok","timestamp":1605218085688,"user_tz":300,"elapsed":407,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"9338918c-d54e-4ba7-bca9-e0471cddcb19","colab":{"base_uri":"https://localhost:8080/"}},"source":["test.info()"],"execution_count":437,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 417 entries, 0 to 416\n","Data columns (total 11 columns):\n"," #   Column  Non-Null Count  Dtype  \n","---  ------  --------------  -----  \n"," 0   Pclass  417 non-null    int64  \n"," 1   Age     417 non-null    float64\n"," 2   SibSp   417 non-null    int64  \n"," 3   Parch   417 non-null    int64  \n"," 4   Fare    417 non-null    float64\n"," 5   Cabin   417 non-null    int64  \n"," 6   Female  417 non-null    float64\n"," 7   Male    417 non-null    float64\n"," 8   S_Port  417 non-null    float64\n"," 9   C_Port  417 non-null    float64\n"," 10  Q_Port  417 non-null    float64\n","dtypes: float64(7), int64(4)\n","memory usage: 36.0 KB\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"sAdq3kUL0vIA"},"source":["**4. Train and Fit Model** "]},{"cell_type":"code","metadata":{"id":"5JZPQSZyxJZA","executionInfo":{"status":"ok","timestamp":1605215955753,"user_tz":300,"elapsed":673,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"230e5bf6-cd01-42dd-fc0d-1ffd285eae6a","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Logistic Regression\n","from sklearn.linear_model import LogisticRegression\n","log_clf = LogisticRegression(random_state=0)\n","log_clf.fit(X_train,y_train)\n","acc_log = round(log_clf.score(X_train, y_train) * 100, 2)\n","\n","#SGDClassifier\n","from sklearn.linear_model import SGDClassifier\n","sgd_clf = SGDClassifier(random_state=0)\n","sgd_clf.fit(X_train,y_train)\n","acc_clf = round(sgd_clf.score(X_train,y_train)*100,2)\n","\n","#Decision Tree \n","from sklearn.tree import DecisionTreeClassifier\n","tree_clf = DecisionTreeClassifier(random_state=0)\n","tree_clf.fit(X_train,y_train)\n","acc_tree = round(tree_clf.score(X_train, y_train) * 100, 2)\n","\n","#SVC \n","from sklearn.svm import LinearSVC\n","svc_clf = LinearSVC()\n","svc_clf.fit(X_train,y_train)\n","acc_svc = round(svc_clf.score(X_train, y_train) * 100, 2)\n","\n","#Naive Bayes \n","from sklearn.naive_bayes import GaussianNB\n","nb_clf = GaussianNB()\n","nb_clf.fit(X_train,y_train)\n","acc_nb = round(nb_clf.score(X_train, y_train) * 100, 2)\n","\n","#Random Forest \n","from sklearn.ensemble import RandomForestClassifier\n","forest_clf = RandomForestClassifier(n_estimators=100)\n","forest_clf.fit(X_train,y_train)\n","acc_forest = round(forest_clf.score(X_train, y_train) * 100, 2)\n"],"execution_count":424,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/svm/_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"E-Ofm3QEuJAa"},"source":["**5. Evaluation**"]},{"cell_type":"code","metadata":{"id":"-ldXkOrnU9TN","executionInfo":{"status":"ok","timestamp":1605216113091,"user_tz":300,"elapsed":328,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"5ae80196-4256-40a0-b37d-1ae3e7389e54","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Evaluate with accuracy\n","results = pd.DataFrame({\n","    'Model': ['Logistic Regression','SGD Classifier','Decision Tree','SVC','Naive Bayes','Random Forest'],\n","    'Score': [acc_log,acc_clf,acc_tree,acc_svc,acc_nb,acc_forest]})\n","result_df = results.sort_values(by='Score', ascending=False)\n","result_df = result_df.set_index('Score')\n","result_df.head"],"execution_count":425,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method NDFrame.head of                      Model\n","Score                     \n","98.31        Decision Tree\n","98.31        Random Forest\n","80.20                  SVC\n","80.09  Logistic Regression\n","79.64       SGD Classifier\n","78.18          Naive Bayes>"]},"metadata":{"tags":[]},"execution_count":425}]},{"cell_type":"code","metadata":{"id":"KBRRQJbmWEiD","executionInfo":{"status":"ok","timestamp":1605217043943,"user_tz":300,"elapsed":2854,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"9ad5a97e-5a21-4110-d158-9d044c25949c","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Evaluate model with cross validation \n","from sklearn.model_selection import cross_val_score\n","\n","scores_log = cross_val_score(log_clf,X_train,y_train,cv=10,scoring='accuracy')\n","scores_sgd = cross_val_score(sgd_clf,X_train,y_train,cv=10,scoring='accuracy')\n","scores_tree = cross_val_score(tree_clf,X_train,y_train,cv=10,scoring='accuracy')\n","scores_svc = cross_val_score(svc_clf,X_train,y_train,cv=10,scoring='accuracy')\n","scores_nb = cross_val_score(nb_clf,X_train,y_train,cv=10,scoring='accuracy')\n","scores_forest = cross_val_score(forest_clf,X_train,y_train,cv=10,scoring='accuracy')\n","\n","cross_val_scores = pd.DataFrame({\n","    'Model': ['Logistic Regression','SGD Classifier','Decision Tree','SVC','Naive Bayes','Random Forest'],\n","    'Score': [scores_log,scores_sgd,scores_tree,scores_svc,scores_nb,scores_forest],\n","    'Mean': [scores_log.mean(),scores_sgd.mean(),scores_tree.mean(),scores_svc.mean(),scores_nb.mean(),scores_forest.mean()],\n","    'Standard Deviation':[scores_log.std(),scores_sgd.std(),scores_tree.std(),scores_svc.std(),scores_nb.std(),scores_forest.std()]})\n","cross_val_scores_df = cross_val_scores.sort_values(by='Mean', ascending=False)\n","cross_val_scores_df = cross_val_scores_df.set_index('Mean')\n","cross_val_scores_df.head"],"execution_count":430,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/sklearn/svm/_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/svm/_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/svm/_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/svm/_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/svm/_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/svm/_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/svm/_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/svm/_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/svm/_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n","/usr/local/lib/python3.6/dist-packages/sklearn/svm/_base.py:947: ConvergenceWarning: Liblinear failed to converge, increase the number of iterations.\n","  \"the number of iterations.\", ConvergenceWarning)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<bound method NDFrame.head of                         Model  ... Standard Deviation\n","Mean                           ...                   \n","0.811070        Random Forest  ...           0.031076\n","0.797549                  SVC  ...           0.024948\n","0.794165  Logistic Regression  ...           0.020605\n","0.781856        Decision Tree  ...           0.059934\n","0.776200          Naive Bayes  ...           0.033616\n","0.764926       SGD Classifier  ...           0.048213\n","\n","[6 rows x 3 columns]>"]},"metadata":{"tags":[]},"execution_count":430}]},{"cell_type":"code","metadata":{"id":"UJC7a9_MZJEL","executionInfo":{"status":"ok","timestamp":1605217833690,"user_tz":300,"elapsed":2266,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"833cc44c-458f-4277-c269-80d19c140982","colab":{"base_uri":"https://localhost:8080/"}},"source":["#Further evaluation with confusion matrix \n","from sklearn.model_selection import cross_val_predict\n","from sklearn.metrics import confusion_matrix\n","predictions = cross_val_predict(forest_clf, X_train, y_train, cv=10)\n","confusion_matrix(y_train, predictions)"],"execution_count":431,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[477,  72],\n","       [ 96, 244]])"]},"metadata":{"tags":[]},"execution_count":431}]},{"cell_type":"code","metadata":{"id":"uzPVgirEcRce","executionInfo":{"status":"ok","timestamp":1605218119290,"user_tz":300,"elapsed":411,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["y_pred = forest_clf.predict(test)"],"execution_count":438,"outputs":[]},{"cell_type":"code","metadata":{"id":"yEtZC3U4dLzt","executionInfo":{"status":"ok","timestamp":1605218125643,"user_tz":300,"elapsed":288,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"5173ab75-c92e-4b51-8836-c3c1d1b757e4","colab":{"base_uri":"https://localhost:8080/"}},"source":["print(y_pred)"],"execution_count":439,"outputs":[{"output_type":"stream","text":["[0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 1 0 1 1 1 0 1 1 0 1 0 1 1 0 0 0 0 1 0 1 1 1\n"," 0 0 0 0 0 0 1 1 0 0 0 1 1 1 1 1 1 1 0 0 0 0 1 0 0 0 0 0 1 1 0 0 1 0 0 0 0\n"," 1 1 0 1 0 0 1 0 0 0 0 0 0 1 0 1 0 0 1 0 0 0 1 0 1 0 1 0 0 0 1 0 0 0 1 0 0\n"," 0 1 0 1 0 0 1 0 1 1 0 1 1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 0\n"," 0 0 1 0 1 0 0 1 1 0 1 0 1 1 1 0 0 0 0 1 0 0 0 0 0 0 1 1 1 1 1 0 1 1 0 1 0\n"," 1 0 0 0 0 0 1 0 1 0 1 1 0 1 1 1 0 1 0 0 0 0 1 0 0 1 0 1 1 0 0 0 1 0 1 0 1\n"," 0 1 0 0 0 0 0 0 1 0 0 1 0 1 1 1 1 1 1 0 0 0 1 1 0 1 0 1 0 1 0 0 0 0 0 1 0\n"," 0 0 1 1 0 0 0 0 1 0 0 0 1 1 0 1 0 0 0 0 0 1 0 0 1 0 1 0 0 0 0 0 0 0 0 0 1\n"," 0 0 0 0 0 0 0 0 1 1 1 0 0 0 1 1 0 1 1 0 0 0 0 0 0 0 0 1 0 1 0 0 0 1 0 0 0\n"," 0 0 0 0 0 0 0 0 0 1 0 1 0 1 0 1 1 0 0 0 1 0 1 0 0 0 0 1 1 0 1 0 0 0 1 1 0\n"," 1 0 0 1 1 0 0 0 0 0 0 1 0 0 1 0 0 0 0 0 1 1 0 0 1 0 1 0 0 1 0 1 0 1 0 0 0\n"," 0 1 0 1 1 0 1 0 0 1]\n"],"name":"stdout"}]}]}