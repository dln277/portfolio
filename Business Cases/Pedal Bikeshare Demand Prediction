{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Pedal Bikeshare Case Study ","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPqbesBo2w1AL2QKRxNNfuS"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"hLj_Fb6B2H2Q","colab_type":"text"},"source":["You were hired by Pedal Bikeshare, a bicycle sharing system, to forecast bicycle demand. Bicycle sharing\n","systems are services that provide bicycles for shared use to its users on a short-term basis. Users can take\n","bicycles from one bicycle station and return it to another station near their destination, all automatically.\n","However, an important challenge of this type of systems is that some stations may run out of bicycles\n","while others may run out of spaces to return bicycles, which causes users to deviate from their original\n","destination to obtain (or return) their bicycles. To alleviate this problem, Pedal Bikeshare hires trailers to\n","move bicycles from one station to another, which leads to additional operating costs.\n","Recently, the operations team reported that trailers are heavily used when the daily demand is greater\n","than 6,000 bicycles per day, but the trailers are not used much otherwise. This suggests that the problem\n","occurs more frequently when bicycle demand is high. Your boss has asked you to create a model to\n","forecast bicycle demand using various weather inputs, such as temperature, wind speed, and humidity.\n","**The goal is to use the model to decide when to hire trailers and thus reduce operating costs**.\n","What target variable would you use for this problem? What machine learning algorithm would you use?\n","Given data about a specific day, how would you use the model to decide whether to hire trailers?\n","Use Orange to create a data mining model and decide when to hire trailers."]},{"cell_type":"code","metadata":{"id":"maaNlxEv3G7K","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":224},"executionInfo":{"status":"ok","timestamp":1597182782843,"user_tz":240,"elapsed":635,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"02c9cba3-6ca9-448a-c638-2277bc0cfee2"},"source":["import pandas as pd \n","\n","#Import dataset\n","bikeshare = pd.read_csv('bike-day.csv')\n","bikeshare.head()"],"execution_count":56,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>instant</th>\n","      <th>season</th>\n","      <th>mnth</th>\n","      <th>holiday</th>\n","      <th>weekday</th>\n","      <th>workingday</th>\n","      <th>weathersit</th>\n","      <th>temp</th>\n","      <th>hum</th>\n","      <th>windspeed</th>\n","      <th>count</th>\n","      <th>abovecap</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.370000</td>\n","      <td>0.692500</td>\n","      <td>0.192167</td>\n","      <td>2294</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.273043</td>\n","      <td>0.381304</td>\n","      <td>0.329665</td>\n","      <td>1951</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.150000</td>\n","      <td>0.441250</td>\n","      <td>0.365671</td>\n","      <td>2236</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0.107500</td>\n","      <td>0.414583</td>\n","      <td>0.184700</td>\n","      <td>2368</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.265833</td>\n","      <td>0.524167</td>\n","      <td>0.129987</td>\n","      <td>3272</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   instant  season  mnth  holiday  ...       hum  windspeed  count  abovecap\n","0        1       1     1        0  ...  0.692500   0.192167   2294         0\n","1        2       1     1        1  ...  0.381304   0.329665   1951         0\n","2        3       1     1        0  ...  0.441250   0.365671   2236         0\n","3        4       1     1        0  ...  0.414583   0.184700   2368         0\n","4        5       1     1        0  ...  0.524167   0.129987   3272         0\n","\n","[5 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":56}]},{"cell_type":"code","metadata":{"id":"cpkCGJfj4gTX","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":238},"executionInfo":{"status":"ok","timestamp":1597182786096,"user_tz":240,"elapsed":510,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"9ff8ee27-0284-4690-f57d-f2c1baf9a040"},"source":["bikeshare.dtypes"],"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/plain":["instant         int64\n","season          int64\n","mnth            int64\n","holiday         int64\n","weekday         int64\n","workingday      int64\n","weathersit      int64\n","temp          float64\n","hum           float64\n","windspeed     float64\n","count           int64\n","abovecap        int64\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":57}]},{"cell_type":"markdown","metadata":{"id":"Lb9Rg09e5Mgu","colab_type":"text"},"source":["Decision: when to hire the trailers to reduce operating costs \n","\n","Target variable: abovecap \n","\n","Try: Logistic Regression \n","\n","Focus: Tree with complexity control"]},{"cell_type":"code","metadata":{"id":"NmryVSym5bwV","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1597182800283,"user_tz":240,"elapsed":453,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["#Import packages for logistic regression \n","\n","from sklearn import preprocessing \n","import matplotlib.pyplot as plt\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split"],"execution_count":58,"outputs":[]},{"cell_type":"code","metadata":{"id":"TbeYMun3T7i1","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":439},"executionInfo":{"status":"ok","timestamp":1597182802681,"user_tz":240,"elapsed":470,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"85dbfd9e-71ab-43ac-de61-4a2765cbd4ab"},"source":["bikeshare.drop(columns=['count'])"],"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>instant</th>\n","      <th>season</th>\n","      <th>mnth</th>\n","      <th>holiday</th>\n","      <th>weekday</th>\n","      <th>workingday</th>\n","      <th>weathersit</th>\n","      <th>temp</th>\n","      <th>hum</th>\n","      <th>windspeed</th>\n","      <th>abovecap</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.370000</td>\n","      <td>0.692500</td>\n","      <td>0.192167</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.273043</td>\n","      <td>0.381304</td>\n","      <td>0.329665</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.150000</td>\n","      <td>0.441250</td>\n","      <td>0.365671</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0.107500</td>\n","      <td>0.414583</td>\n","      <td>0.184700</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0.265833</td>\n","      <td>0.524167</td>\n","      <td>0.129987</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>361</th>\n","      <td>362</td>\n","      <td>1</td>\n","      <td>12</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0.254167</td>\n","      <td>0.652917</td>\n","      <td>0.350133</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>362</th>\n","      <td>363</td>\n","      <td>1</td>\n","      <td>12</td>\n","      <td>0</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0.253333</td>\n","      <td>0.590000</td>\n","      <td>0.155471</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>363</th>\n","      <td>364</td>\n","      <td>1</td>\n","      <td>12</td>\n","      <td>0</td>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0.253333</td>\n","      <td>0.752917</td>\n","      <td>0.124383</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>364</th>\n","      <td>365</td>\n","      <td>1</td>\n","      <td>12</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0.255833</td>\n","      <td>0.483333</td>\n","      <td>0.350754</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>365</th>\n","      <td>366</td>\n","      <td>1</td>\n","      <td>12</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0.215833</td>\n","      <td>0.577500</td>\n","      <td>0.154846</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>366 rows × 11 columns</p>\n","</div>"],"text/plain":["     instant  season  mnth  holiday  ...      temp       hum  windspeed  abovecap\n","0          1       1     1        0  ...  0.370000  0.692500   0.192167         0\n","1          2       1     1        1  ...  0.273043  0.381304   0.329665         0\n","2          3       1     1        0  ...  0.150000  0.441250   0.365671         0\n","3          4       1     1        0  ...  0.107500  0.414583   0.184700         0\n","4          5       1     1        0  ...  0.265833  0.524167   0.129987         0\n","..       ...     ...   ...      ...  ...       ...       ...        ...       ...\n","361      362       1    12        0  ...  0.254167  0.652917   0.350133         0\n","362      363       1    12        0  ...  0.253333  0.590000   0.155471         0\n","363      364       1    12        0  ...  0.253333  0.752917   0.124383         0\n","364      365       1    12        0  ...  0.255833  0.483333   0.350754         0\n","365      366       1    12        0  ...  0.215833  0.577500   0.154846         0\n","\n","[366 rows x 11 columns]"]},"metadata":{"tags":[]},"execution_count":59}]},{"cell_type":"code","metadata":{"id":"ZxogqZrnC19W","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1597179503622,"user_tz":240,"elapsed":484,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["#Test Train Split \n","x = bikeshare.drop('abovecap',axis=1)\n","y = bikeshare['abovecap']\n","x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.20,random_state=0)"],"execution_count":35,"outputs":[]},{"cell_type":"code","metadata":{"id":"joetB1BrDzw4","colab_type":"code","colab":{}},"source":["#Training and Predicting\n","logreg = LogisticRegression()\n","\n","#fit the model with data\n","logreg.fit(x_train,y_train)\n","predictions = logreg.predict(x_test)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"73xcJuz7D45Z","colab_type":"code","colab":{}},"source":["#Evaluation\n","from sklearn.metrics import classification_report\n","print(classification_report(y_test,predictions))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"olQ4h4WSEDk6","colab_type":"code","colab":{}},"source":["#Evluation with Confusion Matrix \n","from sklearn import metrics \n","cnf_matrix = metrics.confusion_matrix(y_test,predictions)\n","cnf_matrix"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UDABnO8uEGkd","colab_type":"code","colab":{}},"source":["print('Accuracy:',metrics.accuracy_score(y_test,predictions))\n","print('Precision:', metrics.precision_score(y_test,predictions))\n","print('Recall:',metrics.recall_score(y_test,predictions))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RBjTfAf7EJJp","colab_type":"code","colab":{}},"source":["#Evaluation with ROC Curve\n","y_pred_proba = logreg.predict_proba(x_test)[::,1]\n","fpr,tpr,_ =metrics.roc_curve(y_test,y_pred_proba)\n","auc = metrics.roc_auc_score(y_test,y_pred_proba)\n","plt.plot(fpr,tpr,label='data 1,auc='+str(auc))\n","plt.legend(loc=4)\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3lUJjaDnEiCg","colab_type":"text"},"source":["**Decision Tree**"]},{"cell_type":"code","metadata":{"id":"Z5xEhAy9EMc4","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1597179528183,"user_tz":240,"elapsed":513,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["#Import relevant packages \n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn import metrics "],"execution_count":41,"outputs":[]},{"cell_type":"code","metadata":{"id":"oHpHLCx2JpqY","colab_type":"code","colab":{}},"source":["#Set target, feature variables already done above\n","#Split training and test set done above"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"U1EMUfIAJ8ms","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1597179530668,"user_tz":240,"elapsed":477,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"c22ad0eb-e3f8-426d-9bd5-ebb2982a74dd"},"source":["#Create decision tree classifier object \n","clf=DecisionTreeClassifier()\n","\n","#Train decision tree classifier\n","clf= clf.fit(x_train,y_train)\n","\n","#Predict the response for test dataset \n","y_pred = clf.predict(x_test)\n","\n","#Model Accuracy, how often the classifier is correct \n","print(\"Accuracy:\", metrics.accuracy_score(y_test,y_pred))"],"execution_count":42,"outputs":[{"output_type":"stream","text":["Accuracy: 1.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"AufcqpoRLBET","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1597182206727,"user_tz":240,"elapsed":566,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}}},"source":["#Use learning curve to find the complexity parameter \n","from sklearn.model_selection import learning_curve\n","features = ['instant','season','mnth','holiday','weekday','workingday','weathersit','temp','hum','windspeed']\n","target = 'abovecap'\n","train_sizes = [1, 50, 100, 150, 200, 292] #80% as training, 20% as validation/test\n","train_sizes, train_scores, validation_scores = learning_curve(\n","    estimator = DecisionTreeClassifier(),\n","    X = bikeshare[features],\n","    y = bikeshare[target],train_sizes = train_sizes, cv = 5,\n","    scoring = 'neg_mean_squared_error')"],"execution_count":49,"outputs":[]},{"cell_type":"code","metadata":{"id":"232YNFy1etcr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":340},"executionInfo":{"status":"ok","timestamp":1597182459486,"user_tz":240,"elapsed":494,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"8b78a452-ad7a-4360-ef1c-aa813760edd0"},"source":["print('Training scores:\\n\\n', train_scores)\n","print('\\n','-'*70) #separator to make the output easy to read \n","print('\\nValidation scores:\\n\\n', validation_scores)"],"execution_count":50,"outputs":[{"output_type":"stream","text":["Training scores:\n","\n"," [[-0. -0. -0. -0. -0.]\n"," [-0. -0. -0. -0. -0.]\n"," [-0. -0. -0. -0. -0.]\n"," [-0. -0. -0. -0. -0.]\n"," [-0. -0. -0. -0. -0.]\n"," [-0. -0. -0. -0. -0.]]\n","\n"," ----------------------------------------------------------------------\n","\n","Validation scores:\n","\n"," [[-0.48648649 -0.47945205 -0.49315068 -0.49315068 -0.49315068]\n"," [-0.48648649 -0.04109589 -0.49315068 -0.49315068 -0.49315068]\n"," [-0.47297297 -0.36986301 -0.49315068 -0.16438356 -0.19178082]\n"," [-0.45945946 -0.15068493 -0.5890411  -0.52054795 -0.47945205]\n"," [-0.48648649 -0.19178082 -0.46575342 -0.20547945 -0.30136986]\n"," [-0.5        -0.49315068 -0.42465753 -0.12328767 -0.23287671]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"UZ5UhjhZgBKe","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":374},"executionInfo":{"status":"ok","timestamp":1597182600980,"user_tz":240,"elapsed":345,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"e153e175-8287-43ee-82c9-392482f296ed"},"source":["#Mean value of each row \n","train_scores_mean = -train_scores.mean(axis = 1)\n","validation_scores_mean = -validation_scores.mean(axis = 1)\n","print('Mean training scores\\n\\n', pd.Series(train_scores_mean, index = train_sizes))\n","print('\\n', '-' * 20) # separator\n","print('\\nMean validation scores\\n\\n',pd.Series(validation_scores_mean, index = train_sizes))"],"execution_count":52,"outputs":[{"output_type":"stream","text":["Mean training scores\n","\n"," 1     -0.0\n","50    -0.0\n","100   -0.0\n","150   -0.0\n","200   -0.0\n","292   -0.0\n","dtype: float64\n","\n"," --------------------\n","\n","Mean validation scores\n","\n"," 1      0.489078\n","50     0.401407\n","100    0.338430\n","150    0.439837\n","200    0.330174\n","292    0.354795\n","dtype: float64\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"mD05g1F7fzm4","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":410},"executionInfo":{"status":"ok","timestamp":1597182756251,"user_tz":240,"elapsed":485,"user":{"displayName":"Duong Le Nguyen","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj_oKikuuULhEMHmMpSdaAniE0IT-MHoLjuERqw=s64","userId":"15331333117223727167"}},"outputId":"61ece1b3-07ce-473b-ba4b-3ed602aa7ab6"},"source":["#Plot learning curve\n","import matplotlib.pyplot as plt\n","\n","plt.style.use('seaborn')\n","plt.plot(train_sizes,train_scores_mean, label = 'Training error')\n","plt.plot(train_sizes,validation_scores_mean, label = 'Validation error')\n","plt.ylabel('MSE',fontsize = 14)\n","plt.xlabel('Training set size', fontsize = 14)\n","plt.title('Learning curves for a decision tree model', fontsize = 18, y=1.03)\n","plt.legend()\n","plt.ylim(0,5)"],"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(0.0, 5.0)"]},"metadata":{"tags":[]},"execution_count":55},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 576x396 with 1 Axes>"]},"metadata":{"tags":[]}}]}]}